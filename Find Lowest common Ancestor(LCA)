#include <bits/stdc++.h>
using namespace std;

const int N = 1e5+10;
vector<int> v[N];
int par[N];

void dfs(int vertex,int parent = -1)
{
    par[vertex] = parent;
    for(int child :v[vertex])
    {
        if(child == parent) continue;

        dfs(child,vertex);

    }
}
vector<int> path(int vertex)
{
    vector<int> ans;
    while(vertex != -1)
    {
        ans.push_back(vertex);
        vertex = par[vertex];

    }
    reverse(ans.begin(), ans.end());
    return ans;
}

int main()
{

    int n;
    cin>>n;
    for(int i=0; i<n-1; i++)
    {
        int v1,v2;
        cin>>v1>>v2;
        v[v1].push_back(v2);
        v[v2].push_back(v1);
    }
    int x,y;
    cin>>x>>y;
    dfs(1,-1);

    vector<int> path_x = path(x);
    vector<int> path_y = path(y);

    int mi = min(path_x.size(), path_y.size());
    int lca = -1;
    for(int i=0; i<mi; i++)
    {
        if(path_x[i] == path_y[i])
        {
            lca = path_x[i];
        }
        else
        {
            break;
        }
    }
    cout<<lca<<endl;
    return 0;
}
